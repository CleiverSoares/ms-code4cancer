{
	"info": {
		"_postman_id": "sofia-code4cancer-completa-automatico",
		"name": "SOFIA Code4Cancer - Collection Completa Autom√°tica",
		"description": "Collection completa com TODOS os endpoints baseados no api.php e login autom√°tico Firebase. Inclui: Chat, Conversas, Usu√°rio, √Åudio, Imagem, IA, etc.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// üî• Script GLOBAL para buscar token Firebase REAL do backend",
					"console.log('üî• [GLOBAL] Buscando token Firebase do backend...');",
					"",
					"// Buscar token do endpoint do backend",
					"pm.sendRequest({",
					"    url: 'http://localhost:8000/api/firebase/obter-token',",
					"    method: 'GET',",
					"    header: {",
					"        'Content-Type': 'application/json'",
					"    }",
					"}, function (err, response) {",
					"    if (err) {",
					"        console.log('‚ùå [GLOBAL] Erro ao buscar token:', err.message);",
					"        console.log('‚ö†Ô∏è [GLOBAL] Usando token fake como fallback');",
					"        gerarTokenFake();",
					"        return;",
					"    }",
					"    ",
					"    try {",
					"        const data = response.json();",
					"        if (data.sucesso && data.token) {",
					"            console.log('‚úÖ [GLOBAL] Token Firebase REAL obtido do backend');",
					"            pm.globals.set('firebase_token', data.token);",
					"            console.log('üîë [GLOBAL] Token real:', data.token.substring(0, 50) + '...');",
					"            console.log('üë§ [GLOBAL] User ID:', data.user_id);",
					"            console.log('‚è∞ [GLOBAL] Timestamp:', new Date(data.timestamp * 1000).toLocaleString());",
					"            console.log('üîÑ [GLOBAL] Expira em:', new Date(data.expires_at * 1000).toLocaleString());",
					"        } else {",
					"            console.log('‚ö†Ô∏è [GLOBAL] Token n√£o encontrado no backend:', data.erro);",
					"            console.log('‚ö†Ô∏è [GLOBAL] Usando token fake como fallback');",
					"            gerarTokenFake();",
					"        }",
					"    } catch (e) {",
					"        console.log('‚ùå [GLOBAL] Erro ao processar resposta:', e.message);",
					"        console.log('‚ö†Ô∏è [GLOBAL] Usando token fake como fallback');",
					"        gerarTokenFake();",
					"    }",
					"});",
					"",
					"function gerarTokenFake() {",
					"    console.log('üîß [GLOBAL] Gerando token fake tempor√°rio...');",
					"",
					"// Gerar timestamp atual (sempre novo)",
					"const agora = Math.floor(Date.now() / 1000);",
					"const expiracao = agora + 3600; // 1 hora",
					"",
					"// Dados do usu√°rio (configure aqui seus dados)",
					"const usuario = {",
					"    uid: 'oeF1WHsv0WO5tVo1UOKbjxo3xQH2',",
					"    email: 'projetodoar02@gmail.com',",
					"    nome: 'projetodoar',",
					"    foto: 'https://lh3.googleusercontent.com/a/ACg8ocI1lWbRq0GAoG3TgMgjCIB3h4kthcJaT_AT3gDcz_xzG_WZPQ=s96-c'",
					"};",
					"",
					"console.log('üë§ [GLOBAL] Usu√°rio:', usuario.email);",
					"console.log('‚è∞ [GLOBAL] Timestamp atual:', new Date(agora * 1000).toLocaleString());",
					"",
					"// Criar payload do JWT com timestamp din√¢mico",
					"const payload = {",
					"    iss: 'https://securetoken.google.com/sofia-14f19',",
					"    aud: 'sofia-14f19',",
					"    auth_time: agora,",
					"    user_id: usuario.uid,",
					"    sub: usuario.uid,",
					"    iat: agora,",
					"    exp: expiracao,",
					"    email: usuario.email,",
					"    email_verified: true,",
					"    name: usuario.nome,",
					"    picture: usuario.foto,",
					"    firebase: {",
					"        identities: {",
					"            'google.com': ['116548262310291424797'],",
					"            email: [usuario.email]",
					"        },",
					"        sign_in_provider: 'google.com'",
					"    }",
					"};",
					"",
					"// Criar header do JWT",
					"const header = {",
					"    alg: 'RS256',",
					"    kid: 'a5a005e97cb1e427300e52cdd50f0b36cd80629b',",
					"    typ: 'JWT'",
					"};",
					"",
					"// Fun√ß√£o para codificar base64",
					"function base64UrlEncode(str) {",
					"    try {",
					"        return btoa(unescape(encodeURIComponent(str)))",
					"            .replace(/\\+/g, '-')",
					"            .replace(/\\//g, '_')",
					"            .replace(/=/g, '');",
					"    } catch (e) {",
					"        console.error('‚ùå Erro ao codificar base64:', e);",
					"        return '';",
					"    }",
					"}",
					"",
					"// Criar JWT com timestamp din√¢mico",
					"const headerEncoded = base64UrlEncode(JSON.stringify(header));",
					"const payloadEncoded = base64UrlEncode(JSON.stringify(payload));",
					"const signature = 'global_dynamic_signature_' + agora; // Assinatura global com timestamp din√¢mico",
					"",
					"const token = `${headerEncoded}.${payloadEncoded}.${signature}`;",
					"",
					"console.log('üîë [GLOBAL] Token DIN√ÇMICO gerado:', token.substring(0, 50) + '...');",
					"console.log('üìè [GLOBAL] Tamanho:', token.length);",
					"console.log('‚è∞ [GLOBAL] Timestamp:', agora);",
					"console.log('üîÑ [GLOBAL] Expira em:', new Date(expiracao * 1000).toLocaleString());",
					"",
					"// Salvar token na vari√°vel global (sempre atualizado)",
					"pm.globals.set('firebase_token', token);",
					"",
					"// Verificar se foi salvo",
					"const tokenSalvo = pm.globals.get('firebase_token');",
					"if (tokenSalvo && tokenSalvo.length > 0) {",
					"    console.log('‚úÖ [GLOBAL] Token DIN√ÇMICO salvo com sucesso');",
					"    console.log('üîç [GLOBAL] Token atual:', tokenSalvo.substring(0, 50) + '...');",
					"} else {",
					"    console.log('‚ùå [GLOBAL] Erro ao salvar token din√¢mico');",
					"}",
					"",
					"console.log('üéØ [GLOBAL] Token Firebase DIN√ÇMICO gerado:');",
					"console.log('UID:', usuario.uid);",
					"console.log('Email:', usuario.email);",
					"console.log('Timestamp:', agora);",
					"console.log('Expira em:', expiracao);"
				]
			}
		}
	],
	"item": [
		{
			"name": "üîê Login Autom√°tico Firebase",
			"item": [
				{
					"name": "1. Obter Token Firebase (Autom√°tico)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// üîÑ Script para gerar token Firebase DIN√ÇMICO a cada requisi√ß√£o",
									"console.log('üîÑ Gerando token Firebase din√¢mico...');",
									"",
									"// Gerar timestamp atual (sempre novo)",
									"const agora = Math.floor(Date.now() / 1000);",
									"const expiracao = agora + 3600; // 1 hora",
									"",
									"// Dados do usu√°rio (configure aqui seus dados)",
									"const usuario = {",
									"    uid: 'oeF1WHsv0WO5tVo1UOKbjxo3xQH2',",
									"    email: 'projetodoar02@gmail.com',",
									"    nome: 'projetodoar',",
									"    foto: 'https://lh3.googleusercontent.com/a/ACg8ocI1lWbRq0GAoG3TgMgjCIB3h4kthcJaT_AT3gDcz_xzG_WZPQ=s96-c'",
									"};",
									"",
									"console.log('üë§ Usu√°rio:', usuario.email);",
									"console.log('‚è∞ Timestamp atual:', new Date(agora * 1000).toLocaleString());",
									"",
									"// Criar payload do JWT com timestamp din√¢mico",
									"const payload = {",
									"    iss: 'https://securetoken.google.com/sofia-14f19',",
									"    aud: 'sofia-14f19',",
									"    auth_time: agora,",
									"    user_id: usuario.uid,",
									"    sub: usuario.uid,",
									"    iat: agora,",
									"    exp: expiracao,",
									"    email: usuario.email,",
									"    email_verified: true,",
									"    name: usuario.nome,",
									"    picture: usuario.foto,",
									"    firebase: {",
									"        identities: {",
									"            'google.com': ['116548262310291424797'],",
									"            email: [usuario.email]",
									"        },",
									"        sign_in_provider: 'google.com'",
									"    }",
									"};",
									"",
									"// Criar header do JWT",
									"const header = {",
									"    alg: 'RS256',",
									"    kid: 'a5a005e97cb1e427300e52cdd50f0b36cd80629b',",
									"    typ: 'JWT'",
									"};",
									"",
									"console.log('üìù Criando JWT...');",
									"",
									"// Fun√ß√£o para codificar base64",
									"function base64UrlEncode(str) {",
									"    try {",
									"        return btoa(unescape(encodeURIComponent(str)))",
									"            .replace(/\\+/g, '-')",
									"            .replace(/\\//g, '_')",
									"            .replace(/=/g, '');",
									"    } catch (e) {",
									"        console.error('‚ùå Erro ao codificar base64:', e);",
									"        return '';",
									"    }",
									"}",
									"",
									"// Criar JWT com timestamp din√¢mico",
									"const headerEncoded = base64UrlEncode(JSON.stringify(header));",
									"const payloadEncoded = base64UrlEncode(JSON.stringify(payload));",
									"const signature = 'dynamic_signature_' + agora; // Assinatura com timestamp din√¢mico",
									"",
									"const token = `${headerEncoded}.${payloadEncoded}.${signature}`;",
									"",
									"console.log('üîë Token DIN√ÇMICO gerado:', token.substring(0, 50) + '...');",
									"console.log('üìè Tamanho:', token.length);",
									"console.log('‚è∞ Timestamp:', agora);",
									"console.log('üîÑ Expira em:', new Date(expiracao * 1000).toLocaleString());",
									"",
									"// Salvar token na vari√°vel global (sempre atualizado)",
									"pm.globals.set('firebase_token', token);",
									"",
									"// Verificar se foi salvo",
									"const tokenSalvo = pm.globals.get('firebase_token');",
									"if (tokenSalvo && tokenSalvo.length > 0) {",
									"    console.log('‚úÖ Token DIN√ÇMICO salvo com sucesso');",
									"    console.log('üîç Token atual:', tokenSalvo.substring(0, 50) + '...');",
									"} else {",
									"    console.log('‚ùå Erro ao salvar token din√¢mico');",
									"}",
									"",
									"console.log('üéØ Token Firebase DIN√ÇMICO gerado:');",
									"console.log('UID:', usuario.uid);",
									"console.log('Email:', usuario.email);",
									"console.log('Timestamp:', agora);",
									"console.log('Expira em:', expiracao);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Verificar se o token foi gerado",
									"const token = pm.globals.get('firebase_token');",
									"",
									"console.log('üîç Verificando token gerado...');",
									"console.log('Token encontrado:', token ? 'SIM' : 'N√ÉO');",
									"",
									"if (token && token.length > 0) {",
									"    console.log('‚úÖ Token Firebase gerado com sucesso!');",
									"    console.log('Token:', token.substring(0, 50) + '...');",
									"    console.log('Tamanho:', token.length, 'caracteres');",
									"    ",
									"    // Testar se o token √© v√°lido",
									"    pm.test('Token gerado com sucesso', function () {",
									"        pm.expect(token).to.be.a('string');",
									"        pm.expect(token).to.include('.');",
									"        pm.expect(token.length).to.be.above(100);",
									"    });",
									"    ",
									"    // Testar se o token tem 3 partes (header.payload.signature)",
									"    const partes = token.split('.');",
									"    pm.test('Token tem formato JWT v√°lido', function () {",
									"        pm.expect(partes).to.have.lengthOf(3);",
									"    });",
									"} else {",
									"    console.log('‚ùå Erro ao gerar token Firebase');",
									"    console.log('Token encontrado:', token);",
									"    ",
									"    pm.test('Token deve ser gerado', function () {",
									"        pm.expect(token).to.not.be.null;",
									"        pm.expect(token).to.not.be.undefined;",
									"        pm.expect(token.length).to.be.above(0);",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Este endpoint gera automaticamente um token Firebase v√°lido para testes. Execute este request primeiro antes de usar qualquer rota protegida."
					},
					"response": []
				},
				{
					"name": "2. Sincronizar Usu√°rio Firebase",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firebase_data\": {\n    \"kind\": \"identitytoolkit#GetAccountInfoResponse\",\n    \"users\": [\n      {\n        \"localId\": \"{{firebase_uid}}\",\n        \"email\": \"{{user_email}}\",\n        \"displayName\": \"{{user_name}}\",\n        \"photoUrl\": \"{{user_photo}}\",\n        \"emailVerified\": true,\n        \"providerUserInfo\": [\n          {\n            \"providerId\": \"google.com\",\n            \"displayName\": \"{{user_name}}\",\n            \"photoUrl\": \"{{user_photo}}\",\n            \"federatedId\": \"{{firebase_uid}}\",\n            \"email\": \"{{user_email}}\",\n            \"rawId\": \"{{firebase_uid}}\"\n          }\n        ],\n        \"lastLoginAt\": \"{{timestamp}}\",\n        \"createdAt\": \"{{timestamp}}\",\n        \"lastRefreshAt\": \"{{current_time}}\"\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/usuario/sincronizar-firebase",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"usuario",
								"sincronizar-firebase"
							]
						},
						"description": "Sincroniza o usu√°rio Firebase com o banco Laravel. Execute ap√≥s gerar o token."
					},
					"response": []
				},
				{
					"name": "3. Testar Token Firebase",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// üîÑ Script para gerar token Firebase DIN√ÇMICO a cada requisi√ß√£o",
									"console.log('üîÑ Gerando token Firebase din√¢mico...');",
									"",
									"// Gerar timestamp atual (sempre novo)",
									"const agora = Math.floor(Date.now() / 1000);",
									"const expiracao = agora + 3600; // 1 hora",
									"",
									"// Dados do usu√°rio (configure aqui seus dados)",
									"const usuario = {",
									"    uid: 'oeF1WHsv0WO5tVo1UOKbjxo3xQH2',",
									"    email: 'projetodoar02@gmail.com',",
									"    nome: 'projetodoar',",
									"    foto: 'https://lh3.googleusercontent.com/a/ACg8ocI1lWbRq0GAoG3TgMgjCIB3h4kthcJaT_AT3gDcz_xzG_WZPQ=s96-c'",
									"};",
									"",
									"console.log('üë§ Usu√°rio:', usuario.email);",
									"console.log('‚è∞ Timestamp atual:', new Date(agora * 1000).toLocaleString());",
									"",
									"// Criar payload do JWT com timestamp din√¢mico",
									"const payload = {",
									"    iss: 'https://securetoken.google.com/sofia-14f19',",
									"    aud: 'sofia-14f19',",
									"    auth_time: agora,",
									"    user_id: usuario.uid,",
									"    sub: usuario.uid,",
									"    iat: agora,",
									"    exp: expiracao,",
									"    email: usuario.email,",
									"    email_verified: true,",
									"    name: usuario.nome,",
									"    picture: usuario.foto,",
									"    firebase: {",
									"        identities: {",
									"            'google.com': ['116548262310291424797'],",
									"            email: [usuario.email]",
									"        },",
									"        sign_in_provider: 'google.com'",
									"    }",
									"};",
									"",
									"// Criar header do JWT",
									"const header = {",
									"    alg: 'RS256',",
									"    kid: 'a5a005e97cb1e427300e52cdd50f0b36cd80629b',",
									"    typ: 'JWT'",
									"};",
									"",
									"// Fun√ß√£o para codificar base64",
									"function base64UrlEncode(str) {",
									"    try {",
									"        return btoa(unescape(encodeURIComponent(str)))",
									"            .replace(/\\+/g, '-')",
									"            .replace(/\\//g, '_')",
									"            .replace(/=/g, '');",
									"    } catch (e) {",
									"        console.error('‚ùå Erro ao codificar base64:', e);",
									"        return '';",
									"    }",
									"}",
									"",
									"// Criar JWT com timestamp din√¢mico",
									"const headerEncoded = base64UrlEncode(JSON.stringify(header));",
									"const payloadEncoded = base64UrlEncode(JSON.stringify(payload));",
									"const signature = 'dynamic_signature_' + agora; // Assinatura com timestamp din√¢mico",
									"",
									"const token = `${headerEncoded}.${payloadEncoded}.${signature}`;",
									"",
									"console.log('üîë Token DIN√ÇMICO gerado:', token.substring(0, 50) + '...');",
									"console.log('üìè Tamanho:', token.length);",
									"console.log('‚è∞ Timestamp:', agora);",
									"console.log('üîÑ Expira em:', new Date(expiracao * 1000).toLocaleString());",
									"",
									"// Salvar token na vari√°vel global (sempre atualizado)",
									"pm.globals.set('firebase_token', token);",
									"",
									"// Verificar se foi salvo",
									"const tokenSalvo = pm.globals.get('firebase_token');",
									"if (tokenSalvo && tokenSalvo.length > 0) {",
									"    console.log('‚úÖ Token DIN√ÇMICO salvo com sucesso');",
									"    console.log('üîç Token atual:', tokenSalvo.substring(0, 50) + '...');",
									"} else {",
									"    console.log('‚ùå Erro ao salvar token din√¢mico');",
									"}",
									"",
									"console.log('üéØ Token Firebase DIN√ÇMICO gerado:');",
									"console.log('UID:', usuario.uid);",
									"console.log('Email:', usuario.email);",
									"console.log('Timestamp:', agora);",
									"console.log('Expira em:', expiracao);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{firebase_token}}",
								"description": "Token Firebase gerado automaticamente"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{base_url}}/teste-token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"teste-token"
							]
						},
						"description": "Testa se o token Firebase est√° sendo validado corretamente."
					},
					"response": []
				},
				{
					"name": "4. Testar Middleware Firebase",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{firebase_token}}",
								"description": "Token Firebase gerado automaticamente"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{base_url}}/teste-middleware",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"teste-middleware"
							]
						},
						"description": "Testa o middleware Firebase usando token autom√°tico."
					},
					"response": []
				}
			],
			"description": "Sequ√™ncia autom√°tica para login Firebase e gera√ß√£o de token."
		},
		{
			"name": "üè• Health Check",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Verifica se a API est√° funcionando."
					},
					"response": []
				},
				{
					"name": "Status da API",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"status"
							]
						},
						"description": "Verifica status detalhado da API."
					},
					"response": []
				}
			],
			"description": "Endpoints de verifica√ß√£o de sa√∫de da API."
		},
		{
			"name": "üí¨ Chat SOFIA",
			"item": [
				{
					"name": "Informa√ß√µes SOFIA (P√∫blico)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/chat/info-sofia",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"chat",
								"info-sofia"
							]
						},
						"description": "Obt√©m informa√ß√µes sobre a SOFIA e suas capacidades (p√∫blico)."
					},
					"response": []
				},
				{
					"name": "Testar Conex√£o Chat (P√∫blico)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/chat/teste-conexao",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"chat",
								"teste-conexao"
							]
						},
						"description": "Testa a conex√£o com o servi√ßo de chat (p√∫blico)."
					},
					"response": []
				},
				{
					"name": "Processar Mensagem",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{firebase_token}}",
								"description": "Token Firebase gerado automaticamente"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"mensagem\": \"Tenho dor de cabe√ßa h√° 3 dias, pode ser c√¢ncer?\",\n  \"historico_conversa\": [\n    \"Tenho dor de cabe√ßa h√° 3 dias, pode ser c√¢ncer?\"\n  ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/chat/mensagem",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"chat",
								"mensagem"
							]
						},
						"description": "Envia mensagem para a SOFIA usando token autom√°tico."
					},
					"response": []
				},
				{
					"name": "Analisar Inten√ß√£o",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{firebase_token}}",
								"description": "Token Firebase gerado automaticamente"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"mensagem\": \"Estou com dor no peito\",\n  \"contexto\": \"Paciente relatando sintomas\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/chat/analisar-intencao",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"chat",
								"analisar-intencao"
							]
						},
						"description": "Analisa a inten√ß√£o da mensagem do usu√°rio."
					},
					"response": []
				},
				{
					"name": "Obter Sugest√µes",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{firebase_token}}",
								"description": "Token Firebase gerado automaticamente"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"contexto\": \"Paciente com dor de cabe√ßa\",\n  \"historico\": [\"Tenho dor de cabe√ßa h√° 3 dias\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/chat/sugestoes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"chat",
								"sugestoes"
							]
						},
						"description": "Obt√©m sugest√µes baseadas no contexto da conversa."
					},
					"response": []
				},
				{
					"name": "Validar Mensagem",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{firebase_token}}",
								"description": "Token Firebase gerado automaticamente"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"mensagem\": \"Estou com dor no peito\",\n  \"tipo_validacao\": \"sintomas\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/chat/validar-mensagem",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"chat",
								"validar-mensagem"
							]
						},
						"description": "Valida se a mensagem cont√©m informa√ß√µes m√©dicas relevantes."
					},
					"response": []
				}
			],
			"description": "Endpoints do chat SOFIA usando token autom√°tico."
		},
		{
			"name": "üéµ Processamento de √Åudio",
			"item": [
				{
					"name": "Processar √Åudio",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{firebase_token}}",
								"description": "Token Firebase gerado automaticamente"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "audio",
									"type": "file",
									"src": [],
									"description": "Arquivo de √°udio para processar (MP3, WAV, M4A, etc.)"
								},
								{
									"key": "contexto",
									"value": "Consulta m√©dica",
									"type": "text",
									"description": "Contexto do √°udio"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/chat/processar-audio",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"chat",
								"processar-audio"
							]
						},
						"description": "Processa arquivo de √°udio e retorna transcri√ß√£o + resposta da SOFIA."
					},
					"response": []
				}
			],
			"description": "Endpoints para processamento de √°udio usando token autom√°tico."
		},
		{
			"name": "üì∑ Processamento de Imagem",
			"item": [
				{
					"name": "Processar Imagem",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{firebase_token}}",
								"description": "Token Firebase gerado automaticamente"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "imagem",
									"type": "file",
									"src": [],
									"description": "Arquivo de imagem para processar (JPG, PNG, etc.)"
								},
								{
									"key": "contexto",
									"value": "Consulta m√©dica",
									"type": "text",
									"description": "Contexto da imagem"
								},
								{
									"key": "pergunta",
									"value": "O que voc√™ v√™ nesta imagem?",
									"type": "text",
									"description": "Pergunta espec√≠fica sobre a imagem"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/chat/processar-imagem",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"chat",
								"processar-imagem"
							]
						},
						"description": "Processa arquivo de imagem e retorna an√°lise + resposta da SOFIA."
					},
					"response": []
				}
			],
			"description": "Endpoints para processamento de imagem usando token autom√°tico."
		},
		{
			"name": "üìã Gest√£o de Conversas",
			"item": [
				{
					"name": "Iniciar Nova Conversa",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{firebase_token}}",
								"description": "Token Firebase gerado automaticamente"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"titulo\": \"Consulta sobre dor de cabe√ßa\",\n  \"tipo_conversa\": \"triagem\",\n  \"primeira_mensagem\": \"Ol√° SOFIA, tenho dor de cabe√ßa h√° 3 dias\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/conversas/iniciar",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"conversas",
								"iniciar"
							]
						},
						"description": "Inicia nova conversa usando token autom√°tico."
					},
					"response": []
				},
				{
					"name": "Buscar Conversas",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{firebase_token}}",
								"description": "Token Firebase gerado automaticamente"
							}
						],
						"url": {
							"raw": "{{base_url}}/conversas?status=ativa",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"conversas"
							],
							"query": [
								{
									"key": "status",
									"value": "ativa",
									"description": "Filtrar por status: ativa, finalizada, arquivada"
								}
							]
						},
						"description": "Busca conversas do usu√°rio usando token autom√°tico."
					},
					"response": []
				},
				{
					"name": "Buscar Conversa Espec√≠fica",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{firebase_token}}",
								"description": "Token Firebase gerado automaticamente"
							}
						],
						"url": {
							"raw": "{{base_url}}/conversas/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"conversas",
								"1"
							]
						},
						"description": "Busca conversa espec√≠fica por ID usando token autom√°tico."
					},
					"response": []
				},
				{
					"name": "Gerar Resumo da Conversa",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{firebase_token}}",
								"description": "Token Firebase gerado automaticamente"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{base_url}}/conversas/1/resumo",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"conversas",
								"1",
								"resumo"
							]
						},
						"description": "Gera resumo autom√°tico da conversa usando IA."
					},
					"response": []
				},
				{
					"name": "Finalizar Conversa",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{firebase_token}}",
								"description": "Token Firebase gerado automaticamente"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"gerar_resumo\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/conversas/1/finalizar",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"conversas",
								"1",
								"finalizar"
							]
						},
						"description": "Finaliza conversa com resumo autom√°tico."
					},
					"response": []
				},
				{
					"name": "Obter Estat√≠sticas",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{firebase_token}}",
								"description": "Token Firebase gerado automaticamente"
							}
						],
						"url": {
							"raw": "{{base_url}}/conversas/estatisticas",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"conversas",
								"estatisticas"
							]
						},
						"description": "Obt√©m estat√≠sticas das conversas do usu√°rio."
					},
					"response": []
				},
				{
					"name": "Deletar Conversa",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{firebase_token}}",
								"description": "Token Firebase gerado automaticamente"
							}
						],
						"url": {
							"raw": "{{base_url}}/conversas/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"conversas",
								"1"
							]
						},
						"description": "Deleta conversa espec√≠fica."
					},
					"response": []
				}
			],
			"description": "Endpoints de gest√£o de conversas usando token autom√°tico."
		},
		{
			"name": "üë§ Gest√£o de Usu√°rio",
			"item": [
				{
					"name": "Buscar Usu√°rio por Firebase UID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{firebase_token}}",
								"description": "Token Firebase gerado automaticamente"
							}
						],
						"url": {
							"raw": "{{base_url}}/usuario/buscar/{{firebase_uid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"usuario",
								"buscar",
								"{{firebase_uid}}"
							]
						},
						"description": "Busca usu√°rio por Firebase UID usando token autom√°tico."
					},
					"response": []
				},
				{
					"name": "Atualizar √öltimo Login",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{firebase_token}}",
								"description": "Token Firebase gerado automaticamente"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firebase_uid\": \"{{firebase_uid}}\",\n  \"ultimo_login_at\": \"{{current_time}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/usuario/1/atualizar-login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"usuario",
								"1",
								"atualizar-login"
							]
						},
						"description": "Atualiza √∫ltimo login do usu√°rio."
					},
					"response": []
				},
				{
					"name": "Atualizar Prefer√™ncias",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{firebase_token}}",
								"description": "Token Firebase gerado automaticamente"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"preferencias\": {\n    \"notificacoes\": true,\n    \"tema\": \"claro\",\n    \"idioma\": \"pt-BR\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/usuario/1/preferencias",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"usuario",
								"1",
								"preferencias"
							]
						},
						"description": "Atualiza prefer√™ncias do usu√°rio."
					},
					"response": []
				},
				{
					"name": "Desativar Usu√°rio",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{firebase_token}}",
								"description": "Token Firebase gerado automaticamente"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ativo\": false,\n  \"motivo\": \"Solicita√ß√£o do usu√°rio\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/usuario/1/desativar",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"usuario",
								"1",
								"desativar"
							]
						},
						"description": "Desativa conta do usu√°rio."
					},
					"response": []
				},
				{
					"name": "Obter Perfil Completo",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{firebase_token}}",
								"description": "Token Firebase gerado automaticamente"
							}
						],
						"url": {
							"raw": "{{base_url}}/usuario/perfil",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"usuario",
								"perfil"
							]
						},
						"description": "Obt√©m perfil completo do usu√°rio."
					},
					"response": []
				}
			],
			"description": "Endpoints de gest√£o de usu√°rio usando token autom√°tico."
		},
		{
			"name": "ü§ñ IA e OpenAI (P√∫blico)",
			"item": [
				{
					"name": "Testar Conex√£o OpenAI",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/teste-conexao",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"teste-conexao"
							]
						},
						"description": "Testa conex√£o com OpenAI (p√∫blico)."
					},
					"response": []
				},
				{
					"name": "Processar Pergunta Simples",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"pergunta\": \"Quais s√£o os sintomas do c√¢ncer de pulm√£o?\",\n  \"contexto\": \"Consulta m√©dica\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/pergunta",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pergunta"
							]
						},
						"description": "Processa pergunta simples com OpenAI (p√∫blico)."
					},
					"response": []
				},
				{
					"name": "Analisar Question√°rio",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"questionario\": {\n    \"nome\": \"Jo√£o Silva\",\n    \"idade\": 45,\n    \"sintomas\": [\"dor de cabe√ßa\", \"fadiga\"],\n    \"historico_familiar\": \"c√¢ncer de pulm√£o\"\n  },\n  \"tipo_analise\": \"triagem\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/analisar-questionario",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"analisar-questionario"
							]
						},
						"description": "Analisa question√°rio de paciente com IA (p√∫blico)."
					},
					"response": []
				},
				{
					"name": "An√°lise Qualidade de Vida",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"dados_paciente\": {\n    \"nome\": \"Maria Santos\",\n    \"idade\": 60,\n    \"diagnostico\": \"c√¢ncer de mama\",\n    \"estagio\": \"II\",\n    \"sintomas\": [\"dor\", \"fadiga\", \"n√°usea\"]\n  },\n  \"escalas\": [\"EORTC QLQ-C30\", \"FACT-G\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/analise-qualidade-vida",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"analise-qualidade-vida"
							]
						},
						"description": "An√°lise espec√≠fica de qualidade de vida (p√∫blico)."
					},
					"response": []
				},
				{
					"name": "Gerar Insights Personalizados",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"perfil_paciente\": {\n    \"idade\": 45,\n    \"sexo\": \"M\",\n    \"diagnostico\": \"c√¢ncer de pr√≥stata\",\n    \"estagio\": \"I\",\n    \"tratamento\": \"cirurgia\"\n  },\n  \"objetivo\": \"recomendacoes_pos_tratamento\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/gerar-insights",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"gerar-insights"
							]
						},
						"description": "Gera insights personalizados com IA (p√∫blico)."
					},
					"response": []
				},
				{
					"name": "Configurar Modelo IA",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"modelo\": \"gpt-4o\",\n  \"temperatura\": 0.7,\n  \"max_tokens\": 1000,\n  \"contexto_especializado\": \"oncologia\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/configurar-modelo",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"configurar-modelo"
							]
						},
						"description": "Configura modelo da IA (p√∫blico)."
					},
					"response": []
				}
			],
			"description": "Endpoints de IA e OpenAI (p√∫blicos)."
		},
		{
			"name": "üîß Debug e Testes",
			"item": [
				{
					"name": "Dashboard Protegido (Sanctum)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{firebase_token}}",
								"description": "Token Firebase gerado automaticamente"
							}
						],
						"url": {
							"raw": "{{base_url}}/dashboard",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dashboard"
							]
						},
						"description": "Testa rota protegida com Sanctum."
					},
					"response": []
				},
				{
					"name": "User Info (Sanctum)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{firebase_token}}",
								"description": "Token Firebase gerado automaticamente"
							}
						],
						"url": {
							"raw": "{{base_url}}/user",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user"
							]
						},
						"description": "Obt√©m informa√ß√µes do usu√°rio autenticado (Sanctum)."
					},
					"response": []
				}
			],
			"description": "Endpoints de debug e testes usando token autom√°tico."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Script global para configurar vari√°veis autom√°ticas",
					"",
					"// Configurar dados do usu√°rio (modifique aqui se necess√°rio)",
					"pm.globals.set('firebase_uid', 'oeF1WHsv0WO5tVo1UOKbjxo3xQH2');",
					"pm.globals.set('user_email', 'projetodoar02@gmail.com');",
					"pm.globals.set('user_name', 'projetodoar');",
					"pm.globals.set('user_photo', 'https://lh3.googleusercontent.com/a/ACg8ocI1lWbRq0GAoG3TgMgjCIB3h4kthcJaT_AT3gDcz_xzG_WZPQ=s96-c');",
					"",
					"// Configurar timestamps",
					"const agora = Date.now();",
					"pm.globals.set('timestamp', agora.toString());",
					"pm.globals.set('current_time', new Date().toISOString());",
					"",
					"console.log('üîß Vari√°veis globais configuradas automaticamente');",
					"console.log('UID:', pm.globals.get('firebase_uid'));",
					"console.log('Email:', pm.globals.get('user_email'));"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Script global para testes",
					"console.log('‚úÖ Request executado com sucesso');",
					"",
					"// Teste b√°sico de resposta",
					"pm.test('Status code is successful', function () {",
					"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
					"});",
					"",
					"// Teste de tempo de resposta",
					"pm.test('Response time is less than 5000ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000/api",
			"type": "string",
			"description": "URL base da API Laravel"
		},
		{
			"key": "firebase_token_real",
			"value": "",
			"type": "string",
			"description": "Token Firebase REAL obtido do frontend - cole aqui o token real do Firebase"
		},
		{
			"key": "firebase_uid",
			"value": "oeF1WHsv0WO5tVo1UOKbjxo3xQH2",
			"type": "string",
			"description": "Firebase UID do usu√°rio"
		},
		{
			"key": "user_email",
			"value": "projetodoar02@gmail.com",
			"type": "string",
			"description": "Email do usu√°rio"
		},
		{
			"key": "user_name",
			"value": "projetodoar",
			"type": "string",
			"description": "Nome do usu√°rio"
		},
		{
			"key": "user_photo",
			"value": "https://lh3.googleusercontent.com/a/ACg8ocI1lWbRq0GAoG3TgMgjCIB3h4kthcJaT_AT3gDcz_xzG_WZPQ=s96-c",
			"type": "string",
			"description": "URL da foto do usu√°rio"
		},
		{
			"key": "timestamp",
			"value": "",
			"type": "string",
			"description": "Timestamp atual"
		},
		{
			"key": "current_time",
			"value": "",
			"type": "string",
			"description": "Data/hora atual em ISO"
		}
	]
}
