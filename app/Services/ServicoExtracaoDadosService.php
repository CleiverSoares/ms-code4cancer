<?php

namespace App\Services;

use Illuminate\Support\Facades\Log;

class ServicoExtracaoDadosService
{
    /**
     * Extrai dados do resumo da OpenAI
     */
    public function extrairDadosDoResumo(string $resumoOpenAI): array
    {
        Log::info('üîç Extraindo dados do resumo da OpenAI:', ['resumo' => $resumoOpenAI]);
        
        $dados = [];
        
        // Detectar nome no resumo
        if (preg_match('/nome[:\s]+([a-z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß\s]+)/i', $resumoOpenAI, $matches)) {
            $nome = trim($matches[1]);
            if (!str_contains(strtolower($nome), 'encerrar') && strlen($nome) > 2) {
                $dados['nome_completo'] = $nome;
                Log::info('‚úÖ Nome extra√≠do do resumo:', ['nome' => $nome]);
            }
        }
        
        // Detectar data de nascimento
        if (preg_match('/(\d{1,2})\/(\d{1,2})\/(\d{4})/', $resumoOpenAI, $matches)) {
            $dia = str_pad($matches[1], 2, '0', STR_PAD_LEFT);
            $mes = str_pad($matches[2], 2, '0', STR_PAD_LEFT);
            $ano = $matches[3];
            $dados['data_nascimento'] = "{$ano}-{$mes}-{$dia}";
            Log::info('‚úÖ Data extra√≠da do resumo:', ['data' => $dados['data_nascimento']]);
        }
        
        // Detectar sexo biol√≥gico
        if (preg_match('/sexo[:\s]+(masculino|feminino|m|f)/i', $resumoOpenAI, $matches)) {
            $sexo = strtolower($matches[1]);
            $dados['sexo_biologico'] = ($sexo === 'm' || $sexo === 'masculino') ? 'M' : 'F';
            Log::info('‚úÖ Sexo extra√≠do do resumo:', ['sexo' => $dados['sexo_biologico']]);
        }
        
        // Detectar atividade sexual
        if (preg_match('/atividade[:\s]+sexual[:\s]+(sim|n√£o|s|n)/i', $resumoOpenAI, $matches)) {
            $dados['atividade_sexual'] = in_array(strtolower($matches[1]), ['sim', 's']);
            Log::info('‚úÖ Atividade sexual extra√≠da do resumo:', ['valor' => $dados['atividade_sexual']]);
        }
        
        // Detectar peso
        if (preg_match('/peso[:\s]+(\d+(?:[.,]\d+)?)\s*(?:kg)?/i', $resumoOpenAI, $matches)) {
            $dados['peso_kg'] = (float) str_replace(',', '.', $matches[1]);
            Log::info('‚úÖ Peso extra√≠do do resumo:', ['peso' => $dados['peso_kg']]);
        }
        
        // Detectar altura
        if (preg_match('/altura[:\s]+(\d+(?:[.,]\d+)?)\s*(?:cm|m)?/i', $resumoOpenAI, $matches)) {
            $altura = (float) str_replace(',', '.', $matches[1]);
            if ($altura < 3) {
                $altura = $altura * 100;
            }
            $dados['altura_cm'] = $altura;
            Log::info('‚úÖ Altura extra√≠da do resumo:', ['altura' => $dados['altura_cm']]);
        }
        
        // Detectar cidade/estado
        if (preg_match('/cidade[:\s]+([a-z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß\s]+)\s*\/\s*([a-z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß\s]+)/i', $resumoOpenAI, $matches)) {
            $dados['cidade'] = trim($matches[1]);
            $dados['estado'] = trim($matches[2]);
            Log::info('‚úÖ Cidade/Estado extra√≠dos do resumo:', ['cidade' => $dados['cidade'], 'estado' => $dados['estado']]);
        }
        
        // Detectar tabagismo
        if (preg_match('/fuma[:\s]+(nunca|ex-fumante|sim|n√£o|s|n)/i', $resumoOpenAI, $matches)) {
            $status = strtolower($matches[1]);
            if ($status === 'nunca') {
                $dados['status_tabagismo'] = 'Nunca';
            } elseif ($status === 'ex-fumante') {
                $dados['status_tabagismo'] = 'Ex-fumante';
            } else {
                $dados['status_tabagismo'] = 'Sim';
            }
            Log::info('‚úÖ Tabagismo extra√≠do do resumo:', ['status' => $dados['status_tabagismo']]);
        }
        
        // Detectar consumo de √°lcool
        if (preg_match('/√°lcool[:\s]+(sim|n√£o|s|n)/i', $resumoOpenAI, $matches)) {
            $dados['consome_alcool'] = in_array(strtolower($matches[1]), ['sim', 's']);
            Log::info('‚úÖ Consumo de √°lcool extra√≠do do resumo:', ['valor' => $dados['consome_alcool']]);
        }
        
        // Detectar atividade f√≠sica
        if (preg_match('/atividade[:\s]+f√≠sica[:\s]+(sim|n√£o|s|n)/i', $resumoOpenAI, $matches)) {
            $dados['pratica_atividade'] = in_array(strtolower($matches[1]), ['sim', 's']);
            Log::info('‚úÖ Atividade f√≠sica extra√≠da do resumo:', ['valor' => $dados['pratica_atividade']]);
        }
        
        // Detectar c√¢ncer pessoal
        if (preg_match('/c√¢ncer[:\s]+pessoal[:\s]+(sim|n√£o|s|n)/i', $resumoOpenAI, $matches)) {
            $dados['teve_cancer_pessoal'] = in_array(strtolower($matches[1]), ['sim', 's']);
            Log::info('‚úÖ C√¢ncer pessoal extra√≠do do resumo:', ['valor' => $dados['teve_cancer_pessoal']]);
        }
        
        // Detectar c√¢ncer familiar
        if (preg_match('/parente[:\s]+c√¢ncer[:\s]+(sim|n√£o|s|n)/i', $resumoOpenAI, $matches)) {
            $dados['parente_1grau_cancer'] = in_array(strtolower($matches[1]), ['sim', 's']);
            Log::info('‚úÖ C√¢ncer familiar extra√≠do do resumo:', ['valor' => $dados['parente_1grau_cancer']]);
        }
        
        // Detectar sinais de alerta
        if (preg_match('/sangramento[:\s]+(sim|n√£o|s|n)/i', $resumoOpenAI, $matches)) {
            $dados['sangramento_anormal'] = in_array(strtolower($matches[1]), ['sim', 's']);
            Log::info('‚úÖ Sangramento extra√≠do do resumo:', ['valor' => $dados['sangramento_anormal']]);
        }
        
        if (preg_match('/tosse[:\s]+(sim|n√£o|s|n)/i', $resumoOpenAI, $matches)) {
            $dados['tosse_persistente'] = in_array(strtolower($matches[1]), ['sim', 's']);
            Log::info('‚úÖ Tosse extra√≠da do resumo:', ['valor' => $dados['tosse_persistente']]);
        }
        
        if (preg_match('/n√≥dulo[:\s]+(sim|n√£o|s|n)/i', $resumoOpenAI, $matches)) {
            $dados['nodulos_palpaveis'] = in_array(strtolower($matches[1]), ['sim', 's']);
            Log::info('‚úÖ N√≥dulos extra√≠dos do resumo:', ['valor' => $dados['nodulos_palpaveis']]);
        }
        
        if (preg_match('/perda[:\s]+peso[:\s]+(sim|n√£o|s|n)/i', $resumoOpenAI, $matches)) {
            $dados['perda_peso_nao_intencional'] = in_array(strtolower($matches[1]), ['sim', 's']);
            Log::info('‚úÖ Perda de peso extra√≠da do resumo:', ['valor' => $dados['perda_peso_nao_intencional']]);
        }
        
        // Calcular prioridade baseada nos sinais de alerta
        $sinaisAlerta = [
            $dados['sangramento_anormal'] ?? false,
            $dados['tosse_persistente'] ?? false,
            $dados['nodulos_palpaveis'] ?? false,
            $dados['perda_peso_nao_intencional'] ?? false
        ];
        
        $dados['precisa_atendimento_prioritario'] = in_array(true, $sinaisAlerta);
        
        Log::info('üìä Dados extra√≠dos do resumo da OpenAI:', $dados);
        
        return $dados;
    }

    /**
     * Extrai dados estruturados das mensagens do chat
     */
    public function extrairDadosDasMensagens(array $mensagens): array
    {
        $dados = [];
        $textoCompleto = '';
        
        // Concatenar todas as mensagens
        foreach ($mensagens as $mensagem) {
            $textoCompleto .= ' ' . $mensagem['text'];
        }
        
        Log::info('üîç Extraindo dados do texto completo:', ['texto' => $textoCompleto]);
        
        // Detectar nome (primeira palavra/frase que n√£o seja data, sexo ou "Encerrar")
        if (preg_match('/nome[:\s]+([a-z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß\s]+)/i', $textoCompleto, $matches)) {
            $nome = trim($matches[1]);
            if (!str_contains(strtolower($nome), 'encerrar')) {
                $dados['nome_completo'] = $nome;
                Log::info('‚úÖ Nome extra√≠do:', ['nome' => $nome]);
            }
        } else {
            // Tentar extrair nome diretamente do texto (primeira palavra/frase)
            $palavras = explode(' ', trim($textoCompleto));
            $nome = '';
            
            foreach ($palavras as $palavra) {
                $palavra = trim($palavra);
                
                // Parar se encontrar data, sexo ou "Encerrar"
                if (preg_match('/^\d{1,2}\/\d{1,2}\/\d{4}$/', $palavra) || 
                    in_array(strtolower($palavra), ['masculino', 'feminino', 'm', 'f', 'encerrar'])) {
                    break;
                }
                
                // Adicionar palavra ao nome se n√£o for vazia
                if (!empty($palavra)) {
                    $nome .= ($nome ? ' ' : '') . $palavra;
                }
            }
            
            if (!empty($nome) && strlen($nome) > 2) {
                $dados['nome_completo'] = $nome;
                Log::info('‚úÖ Nome extra√≠do diretamente:', ['nome' => $nome]);
            }
        }
        
        // Detectar data de nascimento
        if (preg_match('/(\d{1,2})\/(\d{1,2})\/(\d{4})/', $textoCompleto, $matches)) {
            $dia = str_pad($matches[1], 2, '0', STR_PAD_LEFT);
            $mes = str_pad($matches[2], 2, '0', STR_PAD_LEFT);
            $ano = $matches[3];
            $dados['data_nascimento'] = "{$ano}-{$mes}-{$dia}";
            Log::info('‚úÖ Data extra√≠da:', ['data' => $dados['data_nascimento']]);
        }
        
        // Detectar sexo biol√≥gico (primeiro m√©todo: com "sexo:")
        if (preg_match('/sexo[:\s]+(masculino|feminino|m|f)/i', $textoCompleto, $matches)) {
            $sexo = strtolower($matches[1]);
            $dados['sexo_biologico'] = ($sexo === 'm' || $sexo === 'masculino') ? 'M' : 'F';
            Log::info('‚úÖ Sexo extra√≠do:', ['sexo' => $dados['sexo_biologico']]);
        } else {
            // Segundo m√©todo: procurar diretamente no texto
            if (preg_match('/\b(masculino|feminino|m|f)\b/i', $textoCompleto, $matches)) {
                $sexo = strtolower($matches[1]);
                $dados['sexo_biologico'] = ($sexo === 'm' || $sexo === 'masculino') ? 'M' : 'F';
                Log::info('‚úÖ Sexo extra√≠do diretamente:', ['sexo' => $dados['sexo_biologico']]);
            }
        }
        
        // Detectar atividade sexual (primeiro m√©todo: com "atividade sexual:")
        if (preg_match('/atividade[:\s]+sexual[:\s]+(sim|n√£o|s|n)/i', $textoCompleto, $matches)) {
            $dados['atividade_sexual'] = in_array(strtolower($matches[1]), ['sim', 's']);
            Log::info('‚úÖ Atividade sexual extra√≠da:', ['valor' => $dados['atividade_sexual']]);
        } else {
            // Segundo m√©todo: procurar "Sim" ou "N√£o" ap√≥s sexo
            if (preg_match('/\b(masculino|feminino|m|f)\b\s+(sim|n√£o|s|n)\b/i', $textoCompleto, $matches)) {
                $dados['atividade_sexual'] = in_array(strtolower($matches[2]), ['sim', 's']);
                Log::info('‚úÖ Atividade sexual extra√≠da diretamente:', ['valor' => $dados['atividade_sexual']]);
            }
        }
        
        // Detectar peso
        if (preg_match('/peso[:\s]+(\d+(?:[.,]\d+)?)\s*(?:kg)?/i', $textoCompleto, $matches)) {
            $dados['peso_kg'] = (float) str_replace(',', '.', $matches[1]);
            Log::info('‚úÖ Peso extra√≠do:', ['peso' => $dados['peso_kg']]);
        }
        
        // Detectar altura
        if (preg_match('/altura[:\s]+(\d+(?:[.,]\d+)?)\s*(?:cm|m)?/i', $textoCompleto, $matches)) {
            $altura = (float) str_replace(',', '.', $matches[1]);
            // Se altura < 3, provavelmente est√° em metros, converter para cm
            if ($altura < 3) {
                $altura = $altura * 100;
            }
            $dados['altura_cm'] = $altura;
            Log::info('‚úÖ Altura extra√≠da:', ['altura' => $dados['altura_cm']]);
        }
        
        // Detectar cidade/estado (m√∫ltiplos formatos)
        if (preg_match('/cidade[:\s]+([a-z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß\s]+)\s*\/\s*([a-z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß\s]+)/i', $textoCompleto, $matches)) {
            $dados['cidade'] = trim($matches[1]);
            $dados['estado'] = trim($matches[2]);
            Log::info('‚úÖ Cidade/Estado extra√≠dos (formato cidade/estado):', ['cidade' => $dados['cidade'], 'estado' => $dados['estado']]);
        } elseif (preg_match('/([a-z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß\s]+)\s*,\s*([a-z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß\s]+)/i', $textoCompleto, $matches)) {
            // Formato: "Cidade, Estado" - procurar por padr√£o cidade, estado
            $cidade = trim($matches[1]);
            $estado = trim($matches[2]);
            
            // Validar se n√£o s√£o n√∫meros ou palavras muito curtas
            if (strlen($cidade) > 2 && strlen($estado) <= 3 && !is_numeric($cidade) && !is_numeric($estado)) {
                $dados['cidade'] = $cidade;
                $dados['estado'] = strtoupper($estado);
                Log::info('‚úÖ Cidade/Estado extra√≠dos (formato cidade, estado):', ['cidade' => $dados['cidade'], 'estado' => $dados['estado']]);
            }
        }
        
        // Detectar tabagismo
        if (preg_match('/fuma[:\s]+(nunca|ex-fumante|sim|n√£o|s|n)/i', $textoCompleto, $matches)) {
            $status = strtolower($matches[1]);
            if ($status === 'nunca') {
                $dados['status_tabagismo'] = 'Nunca';
            } elseif ($status === 'ex-fumante') {
                $dados['status_tabagismo'] = 'Ex-fumante';
            } else {
                $dados['status_tabagismo'] = 'Sim';
            }
            Log::info('‚úÖ Tabagismo extra√≠do:', ['status' => $dados['status_tabagismo']]);
        }
        
        // Detectar consumo de √°lcool
        if (preg_match('/√°lcool[:\s]+(sim|n√£o|s|n)/i', $textoCompleto, $matches)) {
            $dados['consome_alcool'] = in_array(strtolower($matches[1]), ['sim', 's']);
            Log::info('‚úÖ Consumo de √°lcool extra√≠do:', ['valor' => $dados['consome_alcool']]);
        }
        
        // Detectar atividade f√≠sica
        if (preg_match('/atividade[:\s]+f√≠sica[:\s]+(sim|n√£o|s|n)/i', $textoCompleto, $matches)) {
            $dados['pratica_atividade'] = in_array(strtolower($matches[1]), ['sim', 's']);
            Log::info('‚úÖ Atividade f√≠sica extra√≠da:', ['valor' => $dados['pratica_atividade']]);
        }
        
        // Detectar c√¢ncer pessoal
        if (preg_match('/c√¢ncer[:\s]+pessoal[:\s]+(sim|n√£o|s|n)/i', $textoCompleto, $matches)) {
            $dados['teve_cancer_pessoal'] = in_array(strtolower($matches[1]), ['sim', 's']);
            Log::info('‚úÖ C√¢ncer pessoal extra√≠do:', ['valor' => $dados['teve_cancer_pessoal']]);
        }
        
        // Detectar c√¢ncer familiar
        if (preg_match('/parente[:\s]+c√¢ncer[:\s]+(sim|n√£o|s|n)/i', $textoCompleto, $matches)) {
            $dados['parente_1grau_cancer'] = in_array(strtolower($matches[1]), ['sim', 's']);
            Log::info('‚úÖ C√¢ncer familiar extra√≠do:', ['valor' => $dados['parente_1grau_cancer']]);
        }
        
        // Detectar sinais de alerta
        if (preg_match('/sangramento[:\s]+(sim|n√£o|s|n)/i', $textoCompleto, $matches)) {
            $dados['sangramento_anormal'] = in_array(strtolower($matches[1]), ['sim', 's']);
            Log::info('‚úÖ Sangramento extra√≠do:', ['valor' => $dados['sangramento_anormal']]);
        }
        
        if (preg_match('/tosse[:\s]+(sim|n√£o|s|n)/i', $textoCompleto, $matches)) {
            $dados['tosse_persistente'] = in_array(strtolower($matches[1]), ['sim', 's']);
            Log::info('‚úÖ Tosse extra√≠da:', ['valor' => $dados['tosse_persistente']]);
        }
        
        if (preg_match('/n√≥dulo[:\s]+(sim|n√£o|s|n)/i', $textoCompleto, $matches)) {
            $dados['nodulos_palpaveis'] = in_array(strtolower($matches[1]), ['sim', 's']);
            Log::info('‚úÖ N√≥dulos extra√≠dos:', ['valor' => $dados['nodulos_palpaveis']]);
        }
        
        if (preg_match('/perda[:\s]+peso[:\s]+(sim|n√£o|s|n)/i', $textoCompleto, $matches)) {
            $dados['perda_peso_nao_intencional'] = in_array(strtolower($matches[1]), ['sim', 's']);
            Log::info('‚úÖ Perda de peso extra√≠da:', ['valor' => $dados['perda_peso_nao_intencional']]);
        }
        
        // Calcular prioridade baseada nos sinais de alerta
        $sinaisAlerta = [
            $dados['sangramento_anormal'] ?? false,
            $dados['tosse_persistente'] ?? false,
            $dados['nodulos_palpaveis'] ?? false,
            $dados['perda_peso_nao_intencional'] ?? false
        ];
        
        $dados['precisa_atendimento_prioritario'] = in_array(true, $sinaisAlerta);
        
        Log::info('üìä Dados extra√≠dos pelo backend:', $dados);
        
        return $dados;
    }
    
    /**
     * Extrai dados do resumo completo da IA e salva o resumo
     */
    public function extrairDadosDoResumoCompleto(string $resumoIA): array
    {
        Log::info('üîç Extraindo dados do resumo completo da IA:', ['resumo' => $resumoIA]);
        
        $dados = [];
        
        // Detectar nome no resumo
        if (preg_match('/nome[:\s]+completo[:\s]+([a-z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß\s]+)/i', $resumoIA, $matches)) {
            $nome = trim($matches[1]);
            if (!str_contains(strtolower($nome), 'encerrar') && strlen($nome) > 2) {
                $dados['nome_completo'] = $nome;
                Log::info('‚úÖ Nome extra√≠do do resumo:', ['nome' => $nome]);
            }
        }
        
        // Detectar data de nascimento
        if (preg_match('/(\d{1,2})\/(\d{1,2})\/(\d{4})/', $resumoIA, $matches)) {
            $dia = str_pad($matches[1], 2, '0', STR_PAD_LEFT);
            $mes = str_pad($matches[2], 2, '0', STR_PAD_LEFT);
            $ano = $matches[3];
            $dados['data_nascimento'] = "{$ano}-{$mes}-{$dia}";
            Log::info('‚úÖ Data extra√≠da do resumo:', ['data' => $dados['data_nascimento']]);
        }
        
        // Detectar sexo biol√≥gico
        if (preg_match('/sexo[:\s]+biol√≥gico[:\s]+(masculino|feminino|m|f)/i', $resumoIA, $matches)) {
            $sexo = strtolower($matches[1]);
            $dados['sexo_biologico'] = ($sexo === 'm' || $sexo === 'masculino') ? 'M' : 'F';
            Log::info('‚úÖ Sexo extra√≠do do resumo:', ['sexo' => $dados['sexo_biologico']]);
        }
        
        // Detectar atividade sexual
        if (preg_match('/atividade[:\s]+sexual[:\s]+(sim|n√£o|s|n)/i', $resumoIA, $matches)) {
            $dados['atividade_sexual'] = in_array(strtolower($matches[1]), ['sim', 's']);
            Log::info('‚úÖ Atividade sexual extra√≠da do resumo:', ['valor' => $dados['atividade_sexual']]);
        }
        
        // Detectar peso
        if (preg_match('/peso[:\s]+(\d+(?:[.,]\d+)?)\s*(?:kg)?/i', $resumoIA, $matches)) {
            $dados['peso_kg'] = (float) str_replace(',', '.', $matches[1]);
            Log::info('‚úÖ Peso extra√≠do do resumo:', ['peso' => $dados['peso_kg']]);
        }
        
        // Detectar altura
        if (preg_match('/altura[:\s]+(\d+(?:[.,]\d+)?)\s*(?:cm)?/i', $resumoIA, $matches)) {
            $dados['altura_cm'] = (float) str_replace(',', '.', $matches[1]);
            Log::info('‚úÖ Altura extra√≠da do resumo:', ['altura' => $dados['altura_cm']]);
        }
        
        // Detectar cidade (formato "Cidade / Estado: S√£o Paulo, SP")
        if (preg_match('/cidade[:\s]+\/?\s*estado[:\s]+([a-z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß\s]+),\s*([a-z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß\s]+)/i', $resumoIA, $matches)) {
            $cidade = trim($matches[1]);
            $estado = trim($matches[2]);
            if ($cidade !== 'N√£o informado' && $cidade !== 'N√£o aplic√°vel' && strlen($cidade) <= 100) {
                $dados['cidade'] = $cidade;
                $dados['estado'] = strtoupper($estado);
                Log::info('‚úÖ Cidade/Estado extra√≠dos do resumo:', ['cidade' => $dados['cidade'], 'estado' => $dados['estado']]);
            }
        }
        
        // Detectar estado
        if (preg_match('/estado[:\s]+([a-z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß\s]+)/i', $resumoIA, $matches)) {
            $estado = trim($matches[1]);
            // S√≥ aceitar estados v√°lidos de 2 caracteres
            if ($estado !== 'N√£o informado' && $estado !== 'N√£o aplic√°vel' && strlen($estado) === 2) {
                $dados['estado'] = strtoupper($estado);
                Log::info('‚úÖ Estado extra√≠do do resumo:', ['estado' => $dados['estado']]);
            }
        }
        
        // Detectar hist√≥rico pessoal de c√¢ncer (formato "J√° teve algum c√¢ncer diagnosticado: N√£o")
        if (preg_match('/j√°[:\s]+teve[:\s]+algum[:\s]+c√¢ncer[:\s]+diagnosticado[:\s]+(sim|n√£o|s|n)/i', $resumoIA, $matches)) {
            $dados['teve_cancer_pessoal'] = in_array(strtolower($matches[1]), ['sim', 's']);
            Log::info('‚úÖ Hist√≥rico pessoal extra√≠do do resumo:', ['valor' => $dados['teve_cancer_pessoal']]);
        }
        
        // Detectar hist√≥rico familiar
        if (preg_match('/parente[:\s]+primeiro[:\s]+grau[:\s]+(sim|n√£o|s|n)/i', $resumoIA, $matches)) {
            $dados['parente_1grau_cancer'] = in_array(strtolower($matches[1]), ['sim', 's']);
            Log::info('‚úÖ Hist√≥rico familiar extra√≠do do resumo:', ['valor' => $dados['parente_1grau_cancer']]);
        }
        
        // Detectar tabagismo
        if (preg_match('/fuma[:\s]+ou[:\s]+j√°[:\s]+fumou[:\s]+(nunca|ex-fumante|sim)/i', $resumoIA, $matches)) {
            $dados['status_tabagismo'] = ucfirst($matches[1]);
            Log::info('‚úÖ Tabagismo extra√≠do do resumo:', ['status' => $dados['status_tabagismo']]);
        }
        
        // Detectar consumo de √°lcool
        if (preg_match('/consome[:\s]+√°lcool[:\s]+(sim|n√£o|s|n)/i', $resumoIA, $matches)) {
            $dados['consome_alcool'] = in_array(strtolower($matches[1]), ['sim', 's']);
            Log::info('‚úÖ Consumo de √°lcool extra√≠do do resumo:', ['valor' => $dados['consome_alcool']]);
        }
        
        // Detectar atividade f√≠sica
        if (preg_match('/pratica[:\s]+atividade[:\s]+f√≠sica[:\s]+(sim|n√£o|s|n)/i', $resumoIA, $matches)) {
            $dados['pratica_atividade'] = in_array(strtolower($matches[1]), ['sim', 's']);
            Log::info('‚úÖ Atividade f√≠sica extra√≠da do resumo:', ['valor' => $dados['pratica_atividade']]);
        }
        
        // Adicionar o resumo completo aos dados
        $dados['resumo_ia'] = $resumoIA;
        Log::info('‚úÖ Resumo da IA salvo:', ['tamanho' => strlen($resumoIA)]);
        
        Log::info('üìä Dados extra√≠dos do resumo completo:', $dados);
        
        return $dados;
    }
}
